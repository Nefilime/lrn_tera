# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

#trigger:
#- main



pool:
  vmImage: ubuntu-18.04

stages:
- stage: Preparation
  displayName: Validation and Preparation Terraform
  jobs:
    - job: 
      displayName: init & plan Terraform
      steps:
      - task: TerraformInstaller@0
        displayName: Install terraform
        inputs:
          terraformVersion: '1.0.0'
          
      - task: CmdLine@2
        displayName: List work dir
        inputs:
          script: 'ls -la'
      - task: TerraformTaskV2@2
        displayName: Terraform Init
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/k8s'
          backendServiceArm: 'Pay-As-You-Go (9f5e6f55-0b11-4062-9a61-94be3d06c950)'
          backendAzureRmResourceGroupName: 'shell21'
          backendAzureRmStorageAccountName: 'shell21'
          backendAzureRmContainerName: 'terraform'
          backendAzureRmKey: 'terraform.tfstate'

      - task: TerraformTaskV2@2
        displayName: Terraform Plan
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/k8s'
          commandOptions: '-lock=false'
          environmentServiceNameAzureRM: 'Pay-As-You-Go (9f5e6f55-0b11-4062-9a61-94be3d06c950)'
      - task: TerraformTaskV2@2
        inputs:
          provider: 'azurerm'
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/k8s'

- stage: Deploy_terra
  displayName: Deploy Infrastructure
  jobs:
    - job:
      displayName: Terraform Apply
      steps:
        - task: TerraformInstaller@0
          displayName: Install terraform
          inputs:
           terraformVersion: '1.0.0'

        - task: TerraformTaskV2@2
          displayName: Terraform Init
          inputs:
           provider: 'azurerm'
           command: 'init'
           workingDirectory: '$(System.DefaultWorkingDirectory)/k8s'
           backendServiceArm: 'Pay-As-You-Go (9f5e6f55-0b11-4062-9a61-94be3d06c950)'
           backendAzureRmResourceGroupName: 'shell21'
           backendAzureRmStorageAccountName: 'shell21'
           backendAzureRmContainerName: 'terraform'
           backendAzureRmKey: 'terraform.tfstate'

        - task: TerraformTaskV2@2
          displayName: Validate and Apply
          inputs:
            provider: 'azurerm'
            command: 'apply'
            workingDirectory: '$(System.DefaultWorkingDirectory)/k8s'
            environmentServiceNameAzureRM: 'Pay-As-You-Go (9f5e6f55-0b11-4062-9a61-94be3d06c950)'
        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: |
              KUBE_CONF=$(/opt/hostedtoolcache/terraform/1.0.0/x64/terraform output kube_config)
              echo $KUBE_CONF
            workingDirectory: '$(System.DefaultWorkingDirectory)/k8s'
            noProfile: false
            noRc: false
          
        
- stage: Deploy_grafa
  displayName: Deploy Grafana
  jobs:
    - job:
      displayName: Get Credentials
      steps:
        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: 'ls -la'
        - task: TerraformInstaller@0
          displayName: Install terraform
          inputs:
           terraformVersion: '1.0.0'
        
        - task: TerraformTaskV2@2
          displayName: Terraform Init
          inputs:
           provider: 'azurerm'
           command: 'init'
           workingDirectory: '$(System.DefaultWorkingDirectory)/k8s'
           backendServiceArm: 'Pay-As-You-Go (9f5e6f55-0b11-4062-9a61-94be3d06c950)'
           backendAzureRmResourceGroupName: 'shell21'
           backendAzureRmStorageAccountName: 'shell21'
           backendAzureRmContainerName: 'terraform'
           backendAzureRmKey: 'terraform.tfstate'
           
        
