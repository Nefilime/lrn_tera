pool:
  vmImage: ubuntu-18.04
stages:
- stage: Preparation
  displayName: Validation and Preparation Terraform
  jobs:
  - job: ''
    displayName: init & plan Terraform
    steps:
    - task: TerraformInstaller@0
      displayName: Install terraform
      inputs:
        terraformVersion: '1.0.0'

    - task: TerraformTaskV2@2
      displayName: Terraform Init
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/k8s'
        backendServiceArm: 'Pay-As-You-Go (9f5e6f55-0b11-4062-9a61-94be3d06c950)'
        backendAzureRmResourceGroupName: 'shell21'
        backendAzureRmStorageAccountName: 'shell21'
        backendAzureRmContainerName: 'terraform'
        backendAzureRmKey: 'terraform.tfstate'
    - task: TerraformTaskV2@2
      displayName: Terraform Plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/k8s'
        commandOptions: '-lock=false'
        environmentServiceNameAzureRM: 'Pay-As-You-Go (9f5e6f55-0b11-4062-9a61-94be3d06c950)'
    - task: TerraformTaskV2@2
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/k8s'
- stage: Deploy_terra
  displayName: Deploy Infrastructure
  jobs:
  - job: ''
    displayName: Terraform Apply
    steps:
    - task: TerraformInstaller@0
      displayName: Install terraform
      inputs:
        terraformVersion: '1.0.0'
    - task: TerraformTaskV2@2
      displayName: Terraform Init
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/k8s'
        backendServiceArm: 'Pay-As-You-Go (9f5e6f55-0b11-4062-9a61-94be3d06c950)'
        backendAzureRmResourceGroupName: 'shell21'
        backendAzureRmStorageAccountName: 'shell21'
        backendAzureRmContainerName: 'terraform'
        backendAzureRmKey: 'terraform.tfstate'
    - task: TerraformTaskV2@2
      displayName: Validate and Apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/k8s'
        environmentServiceNameAzureRM: 'Pay-As-You-Go (9f5e6f55-0b11-4062-9a61-94be3d06c950)'

- stage: Deploy_grafa
  displayName: Deploy Grafana
  jobs:
  - job: ''
    displayName: Install Grafana
    steps:
    - task: TerraformInstaller@0
      displayName: Install terraform
      inputs:
        terraformVersion: '1.0.0'
    - task: TerraformTaskV2@2
      displayName: Terraform Init
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/k8s'
        backendServiceArm: 'Pay-As-You-Go (9f5e6f55-0b11-4062-9a61-94be3d06c950)'
        backendAzureRmResourceGroupName: 'shell21'
        backendAzureRmStorageAccountName: 'shell21'
        backendAzureRmContainerName: 'terraform'
        backendAzureRmKey: 'terraform.tfstate'
    - task: Bash@3
      displayName: Get kubernetes config
      inputs:
        targetType: 'inline'
        script: |
          mkdir $HOME/.kube
          /opt/hostedtoolcache/terraform/1.0.0/x64/terraform output -raw kube_config > $HOME/.kube/config
        workingDirectory: '$(System.DefaultWorkingDirectory)/k8s'
    - task: HelmInstaller@0
      inputs:
        helmVersion: '2.14.1'
        installKubectl: true
    - task: Kubernetes@1
      displayName: Applay nginx-ingress-controller
      inputs:
        connectionType: 'None'
        command: 'apply'
        arguments: '-f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.47.0/deploy/static/provider/cloud/deploy.yaml --wait=true'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
        outputFormat: 'none'

    - task: Bash@3
      displayName: Wait ingress start
      inputs:
        targetType: 'inline'
        script: 'kubectl wait -n ingress-nginx deploy/ingress-nginx-controller --for condition=available --timeout=60s'
    - task: Bash@3
      displayName: Add annotate to nginx-ingress-controller service
      inputs:
        targetType: 'inline'
        script: 'kubectl annotate service -n ingress-nginx ingress-nginx-controller service.beta.kubernetes.io/azure-dns-label-name=akscluster'
        noProfile: false
        noRc: false




    - task: Kubernetes@1
      displayName: Create NameSpace grafana
      inputs:
        connectionType: 'None'
        command: 'create'
        arguments: 'ns grafana'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
    - task: Bash@3
      displayName: Add Grafana repo
      inputs:
        targetType: 'inline'
        script: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update

    - task: HelmDeploy@0
      displayName: Install Grafana
      inputs:
        connectionType: 'None'
        namespace: 'grafana'
        command: 'upgrade'
        chartType: 'Name'
        chartName: 'prometheus-community/kube-prometheus-stack'
        releaseName: 'prometheus'
        valueFile: '$(System.DefaultWorkingDirectory)/k8s/graf/custom_values_grafana_new.yaml'
        arguments: '--timeout 10m'

    - task: AzureCLI@2
      displayName: Update DNS record
      inputs:
        azureSubscription: 'Pay-As-You-Go (9f5e6f55-0b11-4062-9a61-94be3d06c950)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          #!/bin/bash

          export IP=$(kubectl get ingress -n grafana prometheus-grafana -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

          az network dns record-set a delete --resource-group shell21 --zone-name vv.devops4.fun --name aks -y
          az network dns record-set a add-record --resource-group shell21 --zone-name vv.devops4.fun --record-set-name aks --ipv4-address $IP --ttl 60

    - task: Bash@3
      displayName: Add Cert Magaer and patch ingress resource
      inputs:
         targetType: 'inline'
         script: |
           helm repo add jetstack https://charts.jetstack.io

           helm repo update




           helm install cert-manager jetstack/cert-manager \
             --namespace ingress-nginx \
             --set installCRDs=true \
             --set nodeSelector."kubernetes\.io/os"=linux \
             --set webhook.nodeSelector."kubernetes\.io/os"=linux \
             --set cainjector.nodeSelector."kubernetes\.io/os"=linux \
             --wait --timeout 10m

           kubectl wait -n ingress-nginx deploy/cert-manager-webhook --for condition=available --timeout=60s

           cat <<EOF | kubectl apply -f -
           apiVersion: cert-manager.io/v1
           kind: ClusterIssuer
           metadata:
             name: letsencrypt
           spec:
             acme:
               server: https://acme-staging-v02.api.letsencrypt.org/directory
               email: woolfix@mail.ru
               privateKeySecretRef:
                 name: letsencrypt
               solvers:
               - http01:
                   ingress:
                     class: nginx
                     podTemplate:
                       spec:
                         nodeSelector:
                           "kubernetes.io/os": linux

           EOF

    - task: Bash@3
      displayName: Patch Ingress route
      inputs:
        targetType: 'inline'
        script: 'kubectl patch ingress -n grafana prometheus-grafana --patch-file patch_ingress_new.yaml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/k8s/graf/'

    - task: Bash@3
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/k8s/graf/dash.sh'
        workingDirectory: '$(System.DefaultWorkingDirectory)/k8s/graf/'
